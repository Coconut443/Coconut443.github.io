{"meta":{"title":"Lito的博客","subtitle":"少有人走的路","description":"。。。","author":"Lito","url":"http://Coconut443.github.io","root":"/"},"pages":[],"posts":[{"title":"","slug":"C4_对象与类","date":"2021-06-14T14:07:04.157Z","updated":"2021-05-29T01:49:18.390Z","comments":true,"path":"2021/06/14/C4_对象与类/","link":"","permalink":"http://coconut443.github.io/2021/06/14/C4_%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/","excerpt":"","text":"第四章 对象与类4.1 面向对象程序设计概述 4.1.1 类实现封装的关键在于$绝对不能$让类中的方法直接地访问其他类的实例域。想要使用OOP，一定要清楚对象的三个主要特性： 对象的行为——可以对对象施加哪些操作或方法 对象的状态——施加那些方法时，对象如何响应 对象标识——如何辨别具有相同行为与状态的不同对象如果不经过方法调用就可以改变对象状态，只能说明封装性遭到了破坏。4.1.4 类之间的关系依赖关系：一个类的方法操纵另一个类的对象。应该尽可能地将相互依赖的类减至最少。让类之间耦合度最小。聚合关系（关联关系）：A的对象包含B的对象。继承关系：特殊与一般的关系。 4.2 使用预定义类 对象变量和对象的区别Date dealine;是一个对象变量，但是没有引用对象。要先初始化。deadline = new Date(); 1Date deadline = new Date(); new Date()是构造了一个Date类型的对象，并且他的值是对创建对象的引用。 这里提到了一个静态工厂方法。暂时没有详细解释。 4.2.3 更改器方法与访问器方法 LocalDate aThousandDaysLater = newYearEve.plusDays(1000); 这个方法调用后，newYearsEve不会改为1000天之后的日期。而会生成一个新的LocalDate对象，把这个新的对象赋予aThousandDaysKater。 只访问对象而不修改对象的方法有时称为访问器方法。修改对象的方法称为更改器方法。 在C++中，带有const的方法是访问器方法，默认为更改器方法。 4.3 用户自定义类创建的java文件名必须和public类的名字相匹配。一个源文件中，只能由一个公有类，但可以有任意数目的非公有类。一个文件中可以只有非public类，如果只有一个非public类，此类可以跟文件名不同。每个编译单元（文件）都只能有一个public类，这表示，每个编译单元都有单一的公共接口，用public类来表现。该接口可以按要求包含众多的支持包访问权限的类。如果在某个编译单元内有一个以上的public类，编译器就会给出错误信息。public类的名称必需完全与含有该编译单元的文件名相同。不同将会编译错误。当编译单元完全不带public类也行，且可以对文件随意命名。一个编译单元可以存在多个类，编译时产生多个.class文件，.class文件是程序运行的数据来源。java将public类作为每个编译单元的数据接口，只能有一个。不然不能处理存在多个类的java文件。当一个编译单元有多个非public类时，运行时需要对数据来源进行选择。一个文件也叫一个编译单元。只有一个public类表示每个编译单元都只有一个单一的公共接口。但是还有一种特殊情况，一个类中包含多个非public类，这时候，如果有三个非public类，编译器会得到三个.class文件，和正常情况一样，但是编译器正常情况会选择唯一的public类的class来作为数据接口，这种情况下不知道选择哪个作为接口。有的ide会报错，需要手动选择一个来运行。编译器会将程序中包含main方法的类名提供给字节码解释器。如果多个非public类只有一个类还有main方法，这个程序还是无法顺利执行，必需手动选择。 4.3.5 隐式参数与显式参数 java没有内联方法，所有方法都在类内部定义。是否将某个方法设置为内联是java虚拟机的任务。 4.3.6 封装的优点 警告：不要编写返回引用对象的访问器方法。例如：1234public getHireDay()&#123; return hireDay;&#125; 原因在于如果对于通过这个方法得到的引用对象使用对象自带的更改器方法setTime()就可以随意地使用该方法更改私有状态的值。 如果需要返回一个可变对象的引用。首先要对他进行克隆。对象clone是指存放在另一个位置上的对象副本。 4.3.9 final实例域 final修饰符应该用在基本类型域或者不可变类的域（不可变类的意思是该类中所有方法都不会改变其对象）。对可变类使用final修饰符会产生问题12private final StringBuilder evaluations;evaluations = new StringBuilder(); final 关键字只是表示存储在evaluations中的对象引用不会指示其他StringBuilder对象。但是这个对象本身却是可以修改的。 4.4 静态域与静态方法 静态域。静态域就是实例域添加了static关键字。如果将某个域定义为static，那么这个静态域就不同于其他实例域，实例域属于对象，每个对象对实例域都有一份自己的拷贝，但是静态域只属于类，不属于对象，所有对象都共享一个静态域。即使没有对象，静态域也存在，因为它属于类。 静态常量。Math中有静态常量 public static final double PI = 3.14... 如果没有static关键字，那么就表示PI是实例域，必须要由对象访问PI。 静态方法。静态方法是一种不能向对象实施操作的方法。其没有隐式的参数。就是没有this。但是他却可以访问静态域。以下两种情况使用静态方法： 不需要访问对象状态 只需要访问静态域 工厂方法。工厂方法相较于构造器有两个好处：1 可以对不同对象命名不同。2 工厂方法可以改变所构造对象的类型（通过继承）。 main方法。首先要注意不需要使用对象就可以调用静态方法，所以main方法可以直接被调用，而不需要对象。main方法不对任何对象进行操作。1234567public class Application&#123; public static void main(String[] args) &#123; ... &#125;&#125; 每一个类可以有一个main方法，通过这个main方法可以对类进行测试。如果有一个em类可以在其中写入一个 static main方法，如果执行java em就可以只对em类进行测试，如果em属于一个更大的类app，那么运行java app时，em里的main方法永远不会得到执行。 以下开始写的稍微能看 1.04.5 方法参数 这里Java不同于C++，C++有按值调用和按引用调用。Java只有按值调用。Java得到的是参数值的拷贝，所以Java不能修改能到的参数变量的内容。这里存在三种情况。 1 调用基本数据类型的变量，变量的值无法改变 2 调用对象参数，这里得到的是对象引用的拷贝。所以可以改变对象参数的状态。 3 同时却不能让对象参数引用一个新的对象。 4.6 对象构造 重载：类可以有多个构造器的特征叫做重载。 方法的签名：指出方法名以及方法的参数类型的描述。注意，方法签名不包含返回值类型。 域的默认值：数值为0，布尔值为false，对象引用为null。 无参数的构造器：如果编写一个类时没有编写构造器，那么系统会提供一个无参数的构造器。但是如果编写类时已经提供其他构造器，却没有提供无参构造器，此时系统不会再提供无参构造器。 显式域初始化：1 可以在类定义中，直接把值赋给任何域。2 初始值不一定是常量值。可以调用方法对域进行初始化。12345678910111213class Employee&#123; private static int nextId; private int id = assignId(); ... private static int assignId() &#123; int r = nextId; nextId++; return r; &#125; ...&#125; 参数名：name = aName 调用另一个构造器：关键字this的作用：1 引用方法的隐式参数。2 调用同一个类的另一个构造器。 初始化块：初始化数据域的方法：1 构造器中设置。 2 声明中赋值。 3 使用初始化块。使用初始化块后，不论使用哪个构造器构造对象，id都将在初始化块中被初始化。123456789101112class Employee&#123; private static int nextId; private int id; &#123; id = nextId; nextId++; &#125; ...&#125; 4.7 包 静态导入：import static java.lang.System.* 这样可以使用静态方法和静态域。 类的导入：一个类可以使用所属包的所有类以及其他包中的公有类。 将类放入包：使用哪个 package com.horstmann.corejava 包作用域：public的部分可以被任意的类使用。private部分只能被定义它们的类使用。如果没有指定public或private，这个部分可以被同一个包中的所有方法访问。 4.8 类路径 设置类路径： windows：java -cp c:\\classdir;.;c:\\archives\\archive.jar MyProg 设置环境变量（临时非永久）set CLASSPATH=c:\\classdir;.;c:\\archives\\archive.jar 4.9 文档注释 这里暂时不叙述。 4.10 类设计技巧 一定要保证数据私有！ 一定要对数据初始化！最好显示初始化所有数据。 不要在类中使用过多的基本类型。可以用其他的类代替相关的基本类型。 不是所有的域都需要独立的域访问器和域更改器。 将指责过多的类进行分解。 类名和方法名要体现职责。 优先使用不可变的类。","categories":[],"tags":[]},{"title":"","slug":"C3_Java基本程序设计结构","date":"2021-06-14T14:07:04.155Z","updated":"2021-05-29T01:49:18.390Z","comments":true,"path":"2021/06/14/C3_Java基本程序设计结构/","link":"","permalink":"http://coconut443.github.io/2021/06/14/C3_Java%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/","excerpt":"","text":"第三章 基本程序结构设计 0. 一个简单的Java应用程序public class FirstSample &#123; public static void main(String[] args) &#123; System.out.println(&quot;We will not use &#39;Hello world!&#39;); &#125; &#125; 分析这个程序 public 访问修饰符，控制程序的其他部分对代码的访问级别。 class 关键字 Java程序中全部内容都包含在类中。 java中对类名规则宽松，名字必须一字母开头，可以是字母和数字任意组合，不能使用保留字作为类名。例：FirstSample F和S大写 源代码的文件名必需与公共类名字相同。文件名必须为FirstSample.java java区分大小写 必须有main方法，且main必须声明为public main没有为操作系统返回 退出代码，如果正常退出，直接给出退出代码为0。如果希望返回其他代码，则需要调用System.exit方法 1. 数据类型1.1 整型 0x前缀表示16进制。 L或l后缀表示长整型数值。 java没有无符号int long short byte类型。 1.2 浮点类型 float类型数值有一个后缀F或f。没有后缀F的浮点数值默认为double。也可加D/d。 可以使用Double.isNaN(x)来判断是否为NaN类型。 浮点数值不适用于不接受舍入误差的金融计算中。 1.3 char类型 \\u \\n为转义序列还有一些，\\u可以出现在引号外面。例如public static void main&gt; (String\\u005B\\u005D args) 转义序列会在解析代码之前得到处理。”\\u0022+\\u0022”不会得到”+”，在解析前转换为”+”，所以会得到””+””，解析出来是空串 要注意注释中的\\u，可能会出现错误语法 1.4 Unicode与char类型 强烈建议不仅要在程序中使用char类型，除非确实需要处理UTF-16代码单元。最好将字符串作为抽象数据类型处理。 在Java中char类型描述了UTF-16编码中的一个代码单元，所以有些unicode字符用一个char表示，有些需要用两个。 1.5 boolean类型 整型值和布尔值之间不能进行相互转换。 2. 变量 可以使用Character.isJavaIdentifierStart()或者 Character.isJavaIdentifierPart()来检查unicode字符是否属于Java中字母。 不要在自己的代码中使用$。 2.1 变量初始化 Java中可以把声明放在代码中任何地方，Java中不区分变量和定义。 123double salary = 65000.0System.out.println(salary);int vacationDays = 12; 2.2 常量 Java中使用final指示常量。表示这个变量只能被赋值一次。习惯上常量名使用全大写。 static final表示一个类常量，其可以在一个类中的多个方法中使用。如果声明加上public那么其他类也可以使用他。 3 运算符 当参与/的两个操作数都是整数，表示整数除法，否则表示浮点除法。 可以使用strictfp表示该类必需使用严格的浮点计算。public static strictfp void main(String[] args) 3.1 数学函数与常量 Java中没有幂运算。 double y = Math.pow(x, a) 123import static java.lang.Math.*...System.out.println(sqrt(PI)); 3.2 数值类型之间的转换12int n = 123456789float f = n; // f is 1.23456792E8 如果使用两个数值进行二元操作，要先转化为同一类型，再进行计算。 one double，another -&gt; double else one float, another -&gt; float else one long, another -&gt; long, else int int 3.3 强制类型转换用法： 12double x = 9.997;int nx = (int)x; 如果想进行舍入运算，使用Math.round() 12double x = 9.997;int nx = (int)Math.round(x); 注意不要使用boolean进行任何强制类型转换 可以使用b? 1:0 3.4 关系和boolean运算符12345x != 0 &amp;&amp; 1/x &gt; x + y``` 因为x!=0所以后面不会出问题，因为前半部分会先计算，如果不满足不进入后半部分。### 3.5 位运算符1. 以下两式结果一样 int forthBitFromRight = (n &amp; (1 &lt;&lt; 3)) &gt;&gt; 3int forthBitFromRight = (n &amp; 0b1000) / 0b1000 1234562. 移位运算符的右操作数要完成模32的运算，除非左操作数是long类型，在这种情况下需要对右操作数模64。 例如 1 &lt;&lt; 35 的值等同于 1 &lt;&lt; 3。3. 符号&gt;&gt;会使用符号位填充高位，符号&gt;&gt;&gt;则使用0填充高位。***### 3.6 字符串1. 子串 String gr = “Hello”;String s = gr.substring(0,3); 12345678910112. 允许使用+拼接字符串3. 使用静态join方法将多个字符串放在一起，用一个定界符分割。 `String all = String.join(&quot;/&quot;, &quot;S&quot;, &quot;M&quot;, &quot;L&quot;, &quot;XL&quot;)`4. `s.equals(t)` 检验两个字符串是否相等。一定要用这个比较字符串。5. 使用 == 运算符对两个字符串进行比较，只能判断两个字符串是否在同一位置上。6. 还有 `if (gr.compareTo(&quot;Hello&quot;) == 0)`用来比较。7. 空串 `if （str.length() == 0)` 或 ` if (str.equals(&quot;&quot;))` 8. 字符串是否为null `if (str == null)`9. 返回某个位置代码单元`char first = gr.charAt(0);`10. string API 直接看文档。11. 构建字符串 StringBuilder允许多线程方式操作。 StringBuilder builder = new StringBuilder(); builder.append(ch); builder.append(str); String comString = builder.toString(); 123***### 3.7 输入输出1. 读取输入 import java.util.* Scanner in = new Scanner(System.in); System.out.print(&quot;What&#39;s your name?&quot;); in.nextLine(); //读取一行 in.next(); //读取一个单词 in.nextInt() //读取一个整数 12`System.out.printf()` 可以输出多个参数此外可以使用Console类进行读取密码。 Console cons = System.console(); String username = cons.readLine(“User name: “); char[] passwd = cons.readPassword(“Password: “); System.out.println(“User name is “ + username); System.out.println(“Password is “ + passwd); 123456789101112131415161718192021222324console主要用于cmd，在netbean的控制台和eclipse的控制台里都不能使用。 2. `System.out.printf(&quot;%8.2f&quot;, x)` 这里输出 3333.33，一个空格加7位结果。 3. 可以使用静态 `String.format` 方法创建一个格式化字符串，不输出。 `String message = String.format(&quot;Hello, %s.&quot;, name); ` 4. `System.out.printf(&quot;%1$s %2$tB %2$te, %2$tY&quot;, &quot;Due date:&quot;, new Date())` 第一个%后面跟的是参数索引，以$结束。输出 Due date: February 9, 2015 5. ![格式说明符语法](pic1.JPG)6. 文件输入输出。 `Scanner in = new Scanner(Paths.get(&quot;myfile.txt&quot;), &quot;UTF-8&quot;);` 如果文件名包含\\则需要加入额外的反斜杆\\。这里要注意，读取一个文件时，要知道他的字符编码。 7. 写入文件 `PrintWriter out = new PrintWriter(&quot;myfile.txt&quot;, &quot;UTF-8&quot;);` 8. 如果误用 `Scanner in = new Scanner(&quot;myfile.txt&quot;);` 会将参数作为包含10个字符的数据。 9. 如果使用相对路径，则相对路径应该是文件相对Java虚拟机启动路径的位置。如果使用IDE，那么路径由IDE控制，可以使用下面的而命令找到路径位置。 ` String dir = System.getProperty(&quot;user.dir&quot;); ` *** ### 3.8 控制流程1. 不能在嵌套的两个块中声明同名的变量。2. else与最邻近的if构成一组。3. 在循环中，检测两个浮点数是否相等要特别注意。 `for(double x = 0; x != 10; x+=0.1) ` 可能永远不会结束，因为舍入误差，得不到精确值。4. 尽量不使用switch语句。5. ` for(类型 对象 : 数组) ` for循环*** ### 3.9 大数值1. BigInteger a = BigInteger.valueOf(100); BigInteger c = a.add(b); BigInteger d = a.multiply(b); 1234### 3.10 数组1. 当创建一个数字数组时，所有的元素都初始化为0。对象数组初始化为null。2. 一旦创建了数组就不能再改变他的大小。3. 循环打印。还可以使用foreach或者Arrays.toString()。for (int element : a) System.out.println(a[i]); 4. 数组初始化以及匿名数组 正常初始化：` int[] a = new int[100]; ` 简化初始化：` int[] small = &#123;2,3,4,5,6,7&#125;; ` 匿名数组： ` new int[] = &#123;17, 18, 19&#125;; ` 可以在不创建新变量的情况下重新初始化一个数组：` small = new int[] &#123;17, 18, 19&#125;; ` 上一行等价于 ` int[] anonym = &#123;17, 18, 19&#125;; ` ` small = anonym; ` 5. Java中允许将一个数组变量拷贝到另一个数组变量。这样两个变量将引用同一个数组。 ` int[] l = small; ` 6. Java不能使用数组名+1得到下一个数组元素。","categories":[],"tags":[]},{"title":"","slug":"C5_继承","date":"2021-06-14T14:07:04.153Z","updated":"2021-06-05T02:23:31.410Z","comments":true,"path":"2021/06/14/C5_继承/","link":"","permalink":"http://coconut443.github.io/2021/06/14/C5_%E7%BB%A7%E6%89%BF/","excerpt":"","text":"第五章 继承 5.1 类、超类和子类。 已存在的类称为超类（superclass）、基类或父类。新类称为子类（subclass）、派生类或孩子类。 覆盖方法：超类中的方法对于子类并不适用时，需要提供新方法覆盖（override）超类中的方法。 子类不能直接访问超类的私有域。需要借助超类的公有方法来访问，但是要用super.method()。 super：super只是一个关键字。不是类似于this的东西，因为super不是对象的引用，不能赋给一个对象变量。其有两个用途：1 调用超类方法。 2 调用超类构造器。 多态：一个对象变量可以指示多种实际类型的现象叫做多态。在运行时能够自动选择调用哪个方法的现象叫做动态绑定。1234567891011121314public static void main(String[] args)&#123; Manager boss = new Manager(&quot;Hank&quot;, 8000, 2021, 2, 2); boss.setBonus(5000); Employee[] staff = new Employee[3]; staff[0] = boss; staff[1] = new Employee(&quot;Haryy&quot;, 7000, 2021, 2,3); staff[2] = new Employee(&quot;Tony&quot;, 7000, 2021, 2,4); // 这里Employee e既可是employee，也可是manager，虚拟机根据类型正确调用方法。 for (Employee e : staff) System.out.println(e.getName() + &quot; &quot; + e.getSalary());&#125; 置换法则：程序中出现超类对象的任何地方都可以用子类对象置换。 多态：在Java中对象变量是多态的。一个Employee变量既可以引用一个Employee对象，也可以引用一个Employee类的任何一个子类的对象。 如果在子类中定义了一个与超类签名相同的方法，那么子类中的方法就覆盖了超类中的方法。 理解方法调用过程。p155 在覆盖一个方法时，子类方法不能低于超类方法的可见性。 使用final修饰符可以定义某一类为不允许扩展。类中的某个方法也可以被声明为final，表示子类不能覆盖这个方法。如果将一个类声明为final，那么只有其中的方法自动成为final，而不包括域。public final class Executive extends Manager 将一个子类的引用赋给一个超类变量，编译器是允许的。将一个超类的引用赋给一个子类变量，必须进行类型转换。12345678910111213141516171819// 这样可以 Manager boss = new Manager();Employee em = boss;// 这样不行 Employee em = new Employee()Manager boss = em;// 在继承链上进行向下的类型转换，并且谎报关于对象包含的内容，em不是manager引用Manager boss = (Manager) em; // error ClassCastException// 但下面这个是对的。因为超类可以引用子类对象，而staff[0]本来就引用manager对象Manager boss = (Manager) staff[0];// 建议使用if (staff[1] instanceof Manager)&#123; boss = (Manager) staff[1]; ...&#125; 只能在继承层次内进行类型转换。 将超类转换成子类之前，应该使用instanceof进行检查。 5.2 Object：所有类的超类 为避免发生类型错误，可使用@Override对覆盖超类的方法进行标记 @Override public boolean (Object otherObject) 这样可以避免这样的错误(会报错)：@override public boolean equals(Employee other) hashCode方法定义在Object中，每个对象都有一个默认的hashcode，其值为对象的存储地址。 string 类型有自己的hashcode计算方法，相当于覆盖了object的hashcode 如果重新定义equals方法，就必须重新定义hashCode方法。 使用null安全的 Objects.hashCode() 方法获得对象的hashcode，对于基本类型例如double可以使用 Double.hashCode() 。 如果需要组合多个散列值时，使用 Objects.hash() 并提供多个参数。 Equals和hashCode的定义必须一致。如果 x.equals(y) 返回true，那么 x.hashCode() 的值也必须与y的hashCode一致。 例如：如果equals比较的是店员的ID，那么hashcode方法需要hash雇员的ID。 toString方法：x.toString() 可以用 +x 替代。这条语句将一个空串与x的字符串表示相连接。 如果x是基本类型，这条语句照样能够执行。 Object定义了toString方法，用来输出对象所属的类名和散列码。而数组继承了object的toString方法，所以如果直接把数组变成string，会输出类型和散列吗。可以调用 Arrays.toString() 强烈建议为自定义的每一个类增加toString()方法，这样可以随时查看状态。 5.3 泛型数组列表 ArrayList：是一个采用类型参数的泛型类。 如果有两个ArrayList类型的a和b， 那么a=b是让a和b引用同一个数组列表。 使用以下这个技巧可以方便访问数组元素12345678ArrayList&lt;X&gt; list = new ArrayList&lt;&gt;();while(..)&#123; x = ...; list.add(x); &#125;X[] a = new X[list.size()];list.toArray(a); 书中p183提到了类型化的ArrayList和原始数组列表的兼容性问题，这里暂时不研究。 5.4 对象包装器与自动装箱 包装器：Integer，Long，Double 等。 包装器特点：对象包装器类不可以变，一旦构造了包装器，不能更改其中的值，并且是final，不能定义子类。 ArrayList&lt;Integer&gt; 有自动装箱特性，对它的很多操作可以看成直接对int操作。 5.5 参数数量可变的方法 public PrintStream printf(String fmt, Object... args) &#123; return format(fmt, args); &#125; …是java代码的一部分，表示可以接受任意数量的对象。起始可以看作是一个Object[]数组。5.7 反射 反射：能够分析类能力的程序称为反射。 反射机制可以用来： 在运行时分析类的能力。 在运行时查看对象。 实现通用的数组操作代码。 利用Method对象，这个对象很像C++中的函数指针。 Class类：程序运行期间，Java为所有对象维护一个被称为运行时的类型标识。可以通过Class类来访问这些信息。 Class类实际是一个泛型类。Employee.class的类型是Class&lt;Employee&gt; 可以使用==运算符实现两个类对象比较。 if(e.getClass() == Employee.class) 可以使用nweInstance()动态创建一个类的实例。 e.getClass().newInstance(); 创建一个与e具有相同类类型的实例。 异常类型：未检查异常和已检查异常。对于已检查异常，编译器将会检查是否提供了处理器。 5.8 继承的设计技巧 将公共操作和域放在超类。 不要使用受保护的域。 使用继承实现“is a“关系。 除非所有继承的方法都有意义，否则不要使用继承。 在覆盖方法时，不要改变预期的行为。在覆盖子类中的方法时，不要偏离最初的设计想法。 使用多态，而非类型信息。1234if (x is oftype1) action1(x);else if (x is oftype2) action2(x); 遇到以上代码应该考虑使用多态性。action1和action2如果是相同的概念，就应该为这个概念定义一个方法，将其放在两个类的超类或接口中。 不要过多地使用反射。","categories":[],"tags":[]},{"title":"","slug":"少有人走的路（心理类）","date":"2021-06-13T14:48:30.137Z","updated":"2021-06-14T14:05:47.639Z","comments":true,"path":"2021/06/13/少有人走的路（心理类）/","link":"","permalink":"http://coconut443.github.io/2021/06/13/%E5%B0%91%E6%9C%89%E4%BA%BA%E8%B5%B0%E7%9A%84%E8%B7%AF%EF%BC%88%E5%BF%83%E7%90%86%E7%B1%BB%EF%BC%89/","excerpt":"","text":"少有人走的路——心智成熟的道路 个人评价 这本书的前半部分我个人认为写的很透彻，指明了我内心不敢面对的东西，走向心智成熟，面对自己，对自己负责，给自己自由，自己才能长大。后半部分有些玄学化，逐渐开始探讨一些虚无的东西，如一些巧合的发生，梦境的重现，幸运地躲过灾祸之类。或许是作者层次更高了看到很多自己无法解释的东西，所以用比较玄幻的方式给出一种可能的解释。 初读 人生是艰难的，苦难重重 人生本就是不断发现问题，解决问题的过程。问题是成功与失败的分水岭。 局部的自律只能解决局部的问题，完整的自律才能解决完整的问题 人生需要坚持，日复一日，年复一年，不进则退。 敢于面对痛苦，也要承担责任 如何自律推迟满足： 第一步：面对问题、承担责任、感受痛苦 第二步：解决问题。 解决问题对自己有着非凡意义 解决问题意味着成功，不能解决意味着失败 为了逃避失败不去面对问题，也就无成功可言*父母对孩子的影响 父母需要以身作则，言传身教 才能让下一辈学会自律、自制、自尊 父母的爱和父母的珍视，让孩子学会自尊自爱自尊自爱 学会进步而不是落后，懂得追求幸福而不是自暴自弃 认识到我是个有价值的人，是健全心理的基本前提 自尊自爱的感觉，是自律的基础。 自律的核心，就是学习自我照顾，承认自我价值的重要性，并采取一切措施照顾自己，这是走向自立的关键。时间观念 忽略和漠视时间的价值，就会郁郁寡欢，无谓地虚度光阴面对痛苦 花时间应对让人不舒服的感觉 （面对问题 感受痛苦） 某个问题你不擅长解决，你不想花长时间来应对这种不舒服的感觉，不愿意冷静地分析问题，不想去推迟满足感，最终没有从问题中积累有效的经验 很多人有这样的倾向：问题出现后，就要立刻解决，否则就会思绪烦乱，寝食不安，这样不好，但是如果等待问题自动消失，这种心态更可怕。问题没有消失，他仍然会继续存在，他们是妨碍心灵成长的永远的障碍。承担责任 我们必须面对属于自己的问题，这是解决问题的基本前提。 勇敢地说“这是我的问题，还是由我来解决！” 案例： 作者自己延长工作时间，看到同事早下班，觉得快崩溃了，找上司请求他帮他安排时间，但其实，是希望上司为他负责，把责任推到别人身上，把自由和权力交给命运，政府、社会、独裁者、上司 我们有权力选择自己要做的事，一件事做不了不应该怪罪到制度、或者他人身上 许多人看心理医生都面临一个共同问题，感觉自己不能对付或者改变现状，因此产生恐惧、无助和自我怀疑。多数人力不从心的根源在于他们想逃避自由，不能为他们的问题，他们的生活承担责任。他们感到乏力，在于他们放弃了自己的力量。如果得到治疗，就会意识到，作为成年人，整个一生都充满选择和决定的机会。他们接受这一事实，就会变成一个自由的人。无法接受这种事实，永远都会感觉到自己是个牺牲品。 尊重事实 越是了解事实，处理问题越是得心应手 终身获取新信息新知识，不断绘制人生的地图 身边每天都有新的资讯，要吸收他们，地图的修订就要不断进行 智慧，意味着将思考和行动紧密结合。自我反省和自我审视，对于我们至关重要。 反省自身内心世界的痛苦，往往大于观察外在世界的痛苦，所以，很多人逃避前者而选择后者。实际上愿意献身真理对于我们的非凡价值，将使痛苦显得微不足道迎接挑战 畏惧挑战带来的正常的痛苦，因而不断逃避和撒谎，无异是有意回避有益的痛苦 很多人惧怕面对真实、开诚布公的痛苦，宁可选择有限的诚实和开放，这等同于生活在封闭状态中，从来不敢拿出地图，与现实情况进行比照，表面来看，自我封闭显然容易得多，殊不知尊重真理和事实，其收获远远超过代价 你既要承担责任，也要拒绝你不该承担的责任 学会生气，学会抑制生气，学会恰当表达生气保持平衡 保持平衡的最高原则就是学会放弃 要改变短视，急功近利，渴望寻求捷径的人生态度 既要肯定自我，保持稳定，又要放弃自我，腾出空间，接纳新的想法和观念 为了放弃，首先必需拥有某种事物 什么是爱 我认为 浅显的认为 首先爱的定义要对 个人（自己）以及对他人都生效 既要爱自己 也要爱他人 那么简单的理解就是珍视 自己 珍视他人 自己和某个人对自己的重要性高 自己愿意为之付出很多的叫做爱，作者认为爱是让双方心智成熟 坚持做难而正确的事 fall in love is not love 坠入情网不是爱 我的问题： 我自认为不配得到很好的东西，我经常想和有缺陷的人交往，我认为自己比较适合和有缺陷的人交往，感觉自己和这样的人在一起共同克服缺陷，但我似乎没想过和没有缺陷的人交往，和看上去很不错的人交往，我感觉我自己配不上，但是我应该提升自己，让自己逐渐变得更好能够和他们交往。 我常常不愿面对现实，不愿面对挑战，认为独立、面对挑战、去爱别人是一件很难的事情。这样不对，我应该学着去改变。 我是否对自己的价值深深地怀疑 是否不顾一切地寻求他人的爱，甚至到了不择手段的地步，为了维系同别人的感情关系，宁愿牺牲独立和自由 不肯为个人成长负责，宁愿牺牲最亲近的人的感受 只想获取却不愿意付出，心智就会永远停留在婴儿时期 END日复一日，年复一年，心智成熟Written By Wyh 2021.6.14","categories":[],"tags":[]},{"title":"fortest","slug":"fortest","date":"2021-05-29T03:23:56.000Z","updated":"2021-05-29T03:25:31.905Z","comments":true,"path":"2021/05/29/fortest/","link":"","permalink":"http://coconut443.github.io/2021/05/29/fortest/","excerpt":"","text":"第一篇文章1 引言 好书推荐《少有人走的路》","categories":[],"tags":[]}],"categories":[],"tags":[]}